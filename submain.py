from umqtt.simple import MQTTClientimport machineimport dhtimport utimeimport ntptimeimport ujsonimport timefrom machine import Timerfrom machine import Pinled=Pin(2,Pin.OUT)led.value(1)sensor = Noneclient = Nonenode_name = Nonedef mqtt_init():    global client    print("Initializing MQTT client.")    print("node name:", node_name)    client = MQTTClient(node_name, broker)    client.set_callback(mqtt_msg)    client.connect()        #send value of led    client.publish("v1/devices/me/attributes", "{value:"+str(not bool(led.value()))+"}")def mqtt_msg(topic, msg):    print("topic:", topic)    print("message:", msg.decode("utf-8"))        if msg.decode("utf-8") == 'OFF':        print("LED OFF")        led.value(1)    if msg.decode("utf-8") == 'ON':        print("LED ON")        led.value(0)def wifi_connect(ssid, password):    import network    sta_if = network.WLAN(network.STA_IF)    if not sta_if.isconnected():        print('connecting to network: ', ssid )        sta_if.active(True)        sta_if.connect(ssid, password)        while not sta_if.isconnected():            pass    print('network config:', sta_if.ifconfig())def sensor_read(timer):    global sensor    global client        sensor.measure()    temp = sensor.temperature()    hum = sensor.humidity()        time = utime.localtime()    try:        client.publish(tx_topic+"/temperature", str(temp))        client.publish(tx_topic+"/humidity", str(hum))    except Exception as e:        print("fail while publishing:", e)       # read this from filecfg_file = open("config.json", "r")json_str = cfg_file.read()cfg_file.close()json = ujson.loads(json_str)node_name = json["name"]ssid = json["ssid"]password = json["pass"]broker = json["broker"]device_token = json["device_token"]tx_topic = json["tx_topic"]rx_topic = json["rx_topic"]dht_pin = json["dht_pin"]period = int(json["period"])print("starting the sensor")# connect to networkwifi_connect(ssid, password)# Initialize DHT sensorprint("Initializing DHT sensor.")sensor = dht.DHT22(machine.Pin(dht_pin))tim = Timer(4)tim.init(mode=Timer.PERIODIC, period=period*1000, callback=sensor_read)# Initialize MQTT client and subscribe to rx_topicmqtt_init()while True:    try:        print("tu sam 1")        client.subscribe(rx_topic)        print("tu sam 2")    except Exception as e:        # Need to handle different errors differently        print("desilo se:",e)        pass        